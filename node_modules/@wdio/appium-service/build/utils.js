"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sanitizeCliOptionValue = exports.cliArgsFromKeyValue = exports.getAppiumCommand = exports.getFilePath = void 0;
const path_1 = require("path");
const logger_1 = __importDefault(require("@wdio/logger"));
const param_case_1 = require("param-case");
const log = logger_1.default('@wdio/appium-service');
const FILE_EXTENSION_REGEX = /\.[0-9a-z]+$/i;
function getFilePath(filePath, defaultFilename) {
    let absolutePath = path_1.resolve(filePath);
    if (!FILE_EXTENSION_REGEX.test(path_1.basename(absolutePath))) {
        absolutePath = path_1.join(absolutePath, defaultFilename);
    }
    return absolutePath;
}
exports.getFilePath = getFilePath;
function getAppiumCommand(moduleName = 'appium') {
    try {
        return require.resolve(moduleName);
    }
    catch (err) {
        log.error('appium is not installed locally.\n' +
            'If you use globally installed appium please add\n' +
            "appium: { command: 'appium' }\n" +
            'to your wdio.conf.js!');
        throw err;
    }
}
exports.getAppiumCommand = getAppiumCommand;
function cliArgsFromKeyValue(keyValueArgs) {
    if (Array.isArray(keyValueArgs)) {
        return keyValueArgs;
    }
    const cliArgs = [];
    for (let key in keyValueArgs) {
        const value = keyValueArgs[key];
        if ((typeof value === 'boolean' && !value) || value === null) {
            continue;
        }
        cliArgs.push(`--${param_case_1.paramCase(key)}`);
        if (typeof value !== 'boolean' && value !== null) {
            cliArgs.push(sanitizeCliOptionValue(value));
        }
    }
    return cliArgs;
}
exports.cliArgsFromKeyValue = cliArgsFromKeyValue;
function sanitizeCliOptionValue(value) {
    const valueString = String(value);
    return /\s/.test(valueString) ? `'${valueString}'` : valueString;
}
exports.sanitizeCliOptionValue = sanitizeCliOptionValue;
